import re

from text_methods import ProcessingText


class PsychoReader:

    @staticmethod
    def dwnld_dictionaries(num):
        # Загрузка словаря. На вход подается номер словаря, возвращается список.
        dicts = {1:['агрессивный,', 'миролюбивый,', 'ада,', 'рай,эдем,', 'аккуратный,', 'неаккуратный,неопрятный,неряшливый,', 'активный,', 'пассивный,бездеятельный,инертный,', 'альтруист,', 'эгоист,', 'антипатия,', 'симпатия,', 'ароматный,', 'вонючий,зловонный,смрадный,', 'беда,', 'удача,счастие,', 'беднеть,', 'богатеть,', 'бедность,', 'богатство,обеспеченность,зажиточность,роскошь,', 'бедный,', 'богатый,состоятельный,обеспечить,счастливый,', 'бедняк,', 'богач,богатый,богатеть,толстосум,', 'бездарный,', 'одарённый,даровитый,талантливый,способный,', 'безделье,', 'дело,работа,', 'бездельничать,', 'работать,', 'бездушный,', 'чуткий,отзывчивый,участливый,внимательный,', 'безжизненный,', 'живой,', 'безобразие,', 'красота,краса,', 'безобразный,', 'красивый,прекрасный,', 'безопасный,', 'опасный,вредный,', 'белый,', 'чёрный,', 'бережливый,', 'расточительный,', 'бескорыстный,', 'корыстолюбивый,корыстный,', 'бесплодный,', 'плодотворный,эффективный,', 'беспокойный,', 'спокойный,тихий,', 'бесполезный,', 'полезный,нужный,', 'беспорядок,', 'порядок,', 'беспорядочный,', 'упорядочить,связный,последовательный,', 'беспристрастный,', 'пристрастный,необъективный,', 'бессилие,', 'сила,мощь,', 'бессильный,', 'сильный,всесильный,всемогущий,', 'бесславие,', 'слава,', 'бесславный,', 'славный,знаменитый,известный,', 'бессмертие,', 'смерть,', 'бессмертный,', 'смертный,преходящий,тленный,', 'бессовестный,', 'честный,совестливый,', 'бессознательно,', 'сознательно,осмысленно,разумно,', 'бестактный,', 'тактичный,корректный,', 'бестолковый,', 'толковый,понятливый,сообразительный,', 'бесчестие,', 'честь,почёт,', 'бесчувственный,', 'чувствительный,чуткий,отзывчивый,душевный,', 'благоприятный,', 'неблагоприятный,неподходящий,неудобный,', 'благоразумный,', 'неблагоразумный,неразумный,нецелесообразный,', 'благородный,', 'неблагородный,невеликодушный,низкий,', 'благосклонный,', 'неблагосклонный,недоброжелательный,', 'ближний,', 'дальний,', 'близкий,', 'далёкий,отдалённый,дальний,чужой,посторонний,сторонний,', 'близко,', 'далеко,вдали,вдалеке,вотдаление,далече,', 'богатеть,', 'беднеть,нищать,', 'богатство,', 'бедность,нищета,нужда,скудость,убожество,', 'богатый,', 'бедный,неимущий,нищий,нищенский,скудный,убогий,', 'богач,', 'бедняк,бедный,нищий,голяк,', 'болеть,', 'здороветь,', 'больной,', 'здоровый,', 'большой,', 'маленький,', 'большой,', 'маленький,небольшой,крошечный,крохотный,мизерный,', 'боязливый,', 'смелый,храбрый,отважный,безбоязненный,бесстрашный,', 'брать,', 'давать,отдавать,', 'будничный,', 'праздничный,нарядный,выходной,', 'будущий,', 'прошлый,пройти,минувший,истекший,', 'былой,', 'грядущий,будущий,наступать,', 'быстрый,', 'медленный,тихий,неторопливый,неспешный,', 'бытие,', 'небытие,', 'важный,', 'неважный,маловажный,незначительный,ничтожный,', 'вбежать,', 'выбежать,вынестись,вылететь,', 'ввернуть,', 'вывернуть,вывинтить,выкрутить,', 'вдаваться,', 'выдаваться,выступать,выдвигаться,', 'вежливый,', 'невежливый,неучтивый,некорректный,резкий,грубый,некультурный,', 'великан,', 'карлик,', 'великий,', 'малый,маленький,незначительный,ничтожный,жалкий,', 'вера,', 'неверие,', 'верить,', 'сомневаться,', 'верность,', 'неверность,измена,предательство,неправильность,ошибочность,', 'верный,', 'неверный,непостоянный,неправильный,ошибочный,', 'верхний,', 'нижний,', 'верующий,', 'неверующий,атеист,', 'верх,', 'низ,', 'весёлый,', 'скучный,печальный,грустный,невесёлый,унылый,', 'весна,', 'осень,', 'вечер,', 'утро,', 'вечный,', 'временный,преходящий,', 'вздыматься,', 'опускаться,', 'видимый,', 'невидимый,незаметный,незримый,', 'виноватый,', 'правый,невиновный,невиноватый,безвинный,', 'включать,', 'исключать,выключать,отключать,', 'вкусный,', 'невкусный,безвкусный,', 'влево,', 'вправо,', 'вместе,', 'врозь,порознь,', 'внешний,', 'внутренний,', 'вниз,', 'вверх,наверх,кверху,ввысь,', 'внизу,', 'вверху,наверху,', 'внутри,', 'снаружи,', 'военный,', 'мирный,', 'возвышать,', 'унижать,принижать,понижать,', 'возможно,', 'невозможно,', 'воин,', 'мир,', 'вонь,', 'аромат,благоухание,', 'восток,', 'запад,закат,', 'восхищение,', 'отвращение,', 'восход,', 'закат,', 'вперёд,', 'назад,', 'впереди,', 'позади,сзади,', 'враг,', 'друг,', 'вражда,', 'дружба,', 'вред,', 'польза,', 'временный,', 'вечный,постоянный,', 'весь,', 'никто,', 'весь,', 'ничто,', 'вспыхивать,', 'угасать,потухать,', 'встреча,', 'разлука,', 'встречать,', 'провожать,', 'всходить,', 'заходить,закатываться,садиться,', 'вталкивать,', 'выталкивать,выпихивать,', 'выбежать,', 'вбежать,влететь,', 'вывернуть,', 'ввернуть,ввинтить,вкрутить,', 'выдумать,', 'действительный,подлинный,', 'выздоравливать,', 'заболевать,', 'выключать,', 'включать,подключать,подсоединять,', 'выпрямлять,', 'сгибать,искривлять,', 'высокий,', 'низкий,низкорослый,невысокий,приземистый,', 'гармония,', 'дисгармония,неблагозвучие,беспорядок,хаос,', 'гасить,', 'зажигать,', 'гаснуть,', 'загораться,', 'гигантский,', 'микроскопический,карликовый,крошечный,маленький,', 'глубина,', 'поверхность,', 'глубокий,', 'мелкий,поверхностный,', 'глупец,', 'мудрец,', 'глупый,', 'неглупый,умный,мудрый,', 'говорить,', 'молчать,', 'годный,', 'негодный,непригодный,', 'голод,', 'сытость,', 'голодный,', 'сытый,сытный,', 'горький,', 'сладкий,радостный,', 'горячий,', 'холодный,', 'грамотный,', 'неграмотный,безграмотный,', 'громкий,', 'тихий,негромкий,бесшумный,неслышный,', 'грубый,', 'изящный,хорошо обработать,тонкий,мягкий,приятный на ощупь,нежный,ласковый,', 'грустить,', 'радоваться,', 'грустный,', 'радостный,весёлый,неунывающий,', 'грядущий,', 'пройти,прошлый,', 'грязный,', 'чистый,опрятный,', 'грязь,', 'чистота,', 'густой,', 'редкий,жидкий,водянистый,', 'да,', 'нет,', 'далёкий,', 'близкий,недалёкий,короткий,', 'далеко,', 'поблизости,недалеко,близко,вблизи,неподалёку,ряд,', 'дальновидный,', 'недальновидный,близорукий,', 'движение,', 'неподвижность,', 'действительность,', 'вымысел,фантазия,мечта,', 'действительный,', 'мнимый,вымышленный,кажущийся,', 'день,', 'ночь,', 'дёшево,', 'дорого,', 'дешёвый,', 'дорогой,драгоценный,бесценный,ценный,', 'длинный,', 'короткий,маленький,краткий,', 'днём,', 'ночью,', 'добро,', 'зло,худо,', 'добродетель,', 'порка,', 'добрый,', 'злой,плохой,худой,дурной,', 'доверие,', 'недоверие,', 'довольный,', 'недовольный,', 'долгий,', 'короткий,краткий,кратковременный,', 'долго,', 'коротко,', 'достоинство,', 'недостаток,несовершенство,', 'друг,', 'враг,недруг,', 'дурацкий,', 'умный,', 'дурной,', 'хороший,', 'жара,', 'холод,стужа,мороз,', 'жарко,', 'холодный,', 'жёсткий,', 'мягкий,', 'живой,', 'мёртвый,неживой,', 'жизнь,', 'смерть,', 'жирный,', 'худой,худощавый,поджарый,постный,тонкий,', 'жить,', 'умирать,', 'за,', 'против,', 'забывать,', 'помнить,вспоминать,', 'завершать,', 'предшествовать,', 'зависимый,', 'независимый,самостоятельный,', 'завязка,', 'развязка,', 'завязывать,', 'развязывать,', 'загораться,', 'гаснуть,тухнуть,', 'задний,', 'передний,', 'зажигать,', 'гасить,тушить,', 'зажмуривать,', 'открывать,', 'закат,', 'рассвет,', 'законный,', 'незаконный,', 'закрывать,', 'открывать,отворять,раскрывать,растворять,распахивать,', 'замедлять,', 'ускорять,убыстрять,', 'заметный,', 'незаметный,', 'заочно,', 'лично,влицо,', 'запад,', 'восток,восход,', 'запирать,', 'отпирать,отмыкать,открывать,', 'заплакать,', 'засмеяться,', 'запрещать,', 'разрешать,позволять,', 'заслужить,', 'незаслуженный,', 'заурядный,', 'незаурядный,оригинальный,необычный,', 'здесь,', 'там,', 'здоровый,', 'больной,нездоровый,хилый,маленький,', 'здоровье,', 'болезнь,', 'зима,', 'лето,', 'зло,', 'добро,благо,', 'злой,', 'добрый,', 'знание,', 'незнание,невежество,', 'значительный,', 'незначительный,', 'знающий,', 'незнающий,невежда,', 'зной,', 'холод,мороз,', 'знойный,', 'холодный,ледяной,', 'избыток,', 'недостаток,', 'известный,', 'неизвестный,незнакомый,', 'излишек,', 'недостаток,дефицит,нехватка,', 'изобилие,', 'недостаток,нужда,', 'индивидуальный,', 'коллективный,общий,', 'интересный,', 'неинтересный,скучный,', 'исключать,', 'включать,вводить,', 'искрение,', 'неискренний,лицемерный,поддельный,притворный,', 'искусственный,', 'натуральный,естественный,', 'истина,', 'ложь,обман,неправда,', 'истинный,', 'ложный,ошибочный,', 'исходный,', 'конечный,заключительный,', 'исчезать,', 'появляться,являться,', 'конец,', 'начать,', 'конкретный,', 'абстрактный,отвлечённый,', 'кончать,', 'начинать,приступать,приниматься,', 'короткий,', 'длинный,долгий,продолжительный,долговременный,', 'красавец,', 'урод,', 'красивый,', 'некрасивый,безобразный,уродливый,', 'краткий,', 'многословный,', 'крепкий,', 'некрепкий,слабый,жидкий,водянистый,', 'кривая,', 'прямая,', 'крупный,', 'мелкий,маленький,', 'кстати,', 'некстати,невпопад,некместо,', 'лаконичный,', 'многословный,', 'левый,', 'правый,лицевой,', 'лёгкий,', 'тяжёлый,увесистый,трудный,нелёгкий,тяжкий,непростой,сложный,мудрёный,обильный,серьёзный,крепкий,сильный,', 'легкомысленный,', 'серьёзный,основательный,обстоятельный,', 'ленивый,', 'трудолюбивый,усердный,', 'лень,', 'трудолюбие,труд,', 'лето,', 'зима,', 'лживый,', 'правдивый,', 'лицемерный,', 'искренний,прямая,открытый,', 'личный,', 'общественный,коллективный,', 'ложный,', 'правдивый,правильный,истинный,настоящий,подлинный,', 'хороший,', 'худой,', 'любить,', 'ненавидеть,', 'любовь,', 'ненависть,', 'максимум,', 'минимум,самое меньший,самое малое,поменьшей мер,', 'маленький,', 'большой,громадный,огромный,великий,колоссальный,гигантский,значительный,', 'мало,', 'много,немало,полно,', 'малодушный,', 'отважный,мужественный,', 'малый,', 'большой,великий,старый,', 'медленный,', 'быстрый,скорый,стремительный,', 'мелкий,', 'крупный,глубокий,', 'минимум,', 'максимум,самое больший,', 'минус,', 'плюс,', 'мир,', 'ссора,', 'мириться,', 'ссориться,', 'младший,', 'старший,', 'мнимый,', 'действительный,реальный,подлинный,', 'много,', 'мало,немного,', 'можно,', 'нельзя,', 'мокрый,', 'сухой,', 'молодёжь,', 'старик,', 'молодеть,', 'стареть,стариться,', 'молодая,', 'старый,старик,', 'молчаливый,', 'разговорчивый,болтливый,', 'мощь,', 'слабость,беспомощность,', 'мука,', 'счастие,', 'мягкий,', 'твёрдый,чёрствый,резкий,суровый,', 'надевать,', 'снимать,', 'наибольший,', 'наименьший,минимальный,', 'наименьший,', 'наибольший,предельный,максимальный,', 'найти,', 'потерять,', 'найтись,', 'потеряться,пропасть,', 'налево,', 'направо,', 'наличие,', 'отсутствие,', 'направо,', 'налево,', 'наружный,', 'внутренний,', 'настоящее,', 'прошлое,', 'настоящий,', 'ненастоящий,поддельный,искусственный,фальшивый,', 'находить,', 'терять,', 'начать,', 'конец,', 'начальный,', 'конечный,завершать,', 'начинать,', 'кончать,завершать,', 'невежливый,', 'вежливый,учтивый,', 'невинный,', 'виноватый,виновный,грешный,', 'недобросовестный,', 'добросовестный,старательный,', 'недостаток,', 'избыток,достоинство,', 'неизвестный,', 'известный,знакомый,', 'некрасивый,', 'красивый,прекрасный,', 'некстати,', 'кстати,впопад,кместо,', 'неопрятный,', 'опрятный,аккуратный,', 'непослушный,', 'послушный,покорный,', 'непохожий,', 'похожий,сходный,подобный,', 'неправда,', 'правда,истина,', 'неправильный,', 'правильный,верный,', 'неприличный,', 'приличный,благопристойный,пристойный,', 'неприязнь,', 'приязнь,расположение,симпатия,', 'неприятный,', 'приятный,симпатичный,', 'неразговорчивый,', 'разговорчивый,словоохотливый,говорливый,болтливый,', 'несговорчивый,', 'покладистый,сговорчивый,уступчивый,', 'несправедливый,', 'заслужить,справедливый,законный,', 'несчастный,', 'счастливый,', 'нетвёрдый,', 'твёрдый,уверенный,', 'неуверенный,', 'уверенный,решительный,', 'неудача,', 'удача,успех,', 'неудачливый,', 'удачливый,везучий,', 'неудачный,', 'удачный,благоприятный,', 'неяркий,', 'яркий,ослепительный,', 'неясный,', 'ясный,чёткий,отчётливый,', 'низкий,', 'высокий,тонкий,писклявый,', 'нищета,', 'роскошь,', 'новый,', 'старинный,стаый,', 'обвинять,', 'оправдывать,', 'облегчать,', 'обременять,', 'общественный,', 'личный,индивидуальный,персональный,', 'обыкновенный,', 'необыкновенный,необычный,незаурядный,неодинаковый,разный,дюжинный,', 'ограниченный,', 'многогранный,различный,', 'однообразный,', 'разнообразный,', 'одобрять,', 'осуждать,', 'оживлять,', 'подавлять,', 'опережать,', 'отставать,', 'оптимизм,', 'пессимизм,', 'опускать,', 'поднимать,', 'опускаться,', 'подниматься,взмывать,', 'опьянять,', 'отрезвлять,', 'осень,', 'весна,', 'ослабеть,', 'усиливаться,', 'отрицать,', 'соглашаться,', 'отвратительный,', 'великолепный,превосходный,прекрасный,чудесный,чудный,', 'отдаляться,отдалять,', 'сближаться,сближать,', 'отказ,', 'согласие,', 'отказываться,отказывать,', 'соглашаться,', 'открывать,', 'закрывать,', 'отрицательный,', 'утвердительный,положительный,позитивный,', 'отрицать,', 'признавать,соглашаться,', 'отсталый,', 'передовой,развитый,', 'отступать,', 'наступать,', 'отталкивать,', 'притягивать,', 'падать,', 'подниматься,', 'пассивный,', 'активный,деятельный,', 'один,', 'последний,', 'передовой,', 'отсталый,', 'печалить,', 'веселить,радовать,', 'печальный,', 'радостный,счастливый,', 'плакать,', 'смеяться,хохотать,', 'плач,', 'смех,хохот,', 'плохой,', 'хороший,', 'победа,', 'поражение,', 'близкий,', 'далёкий,', 'большой,', 'маленький,', 'поверхностный,', 'глубокий,углублённый,основательный,', 'повышаться,повышать,', 'понижаться,понижать,', 'поддельный,', 'подлинный,настоящий,', 'поднимать,', 'опускать,', 'подъём,', 'спуск,', 'поздний,', 'ранний,', 'покладистый,', 'непокладистый,несговорчивый,', 'покупать,', 'продавать,', 'полезный,', 'вредный,', 'полный,', 'пустой,порожний,', 'пология,', 'крутой,', 'польза,', 'вред,', 'порядок,', 'беспорядок,непорядок,хаос,', 'послушный,', 'непокорный,строптивый,непослушный,', 'постоянный,', 'непостоянный,переменный,изменчивый,', 'потом,', 'сначала,сперва,', 'похвала,', 'порицание,осуждение,брань,', 'появляться,', 'исчезать,скрываться,пропадать,', 'правда,', 'ложь,обман,неправда,враньё,кривда,', 'правдивый,', 'лживый,обманчивый,', 'предвзятый,', 'объективный,беспристрастный,непредвзятый,', 'преувеличивать,', 'преуменьшать,умалять,', 'преуменьшать,', 'преувеличивать,утрировать,', 'приближаться,приближать,', 'отдаляться,отдалять,удаляться,удалять,', 'приземлиться,', 'взлететь,подняться,взмыть,взвиться,', 'причудливый,', 'простой,незамысловатый,незатейливый,немудрёный,', 'провал,', 'удача,успех,', 'простой,', 'сложный,замысловатый,причудливый,затейливый,', 'простота,', 'сложность,затейливость,', 'противник,', 'сторонник,соратник,союзник,', 'прошлое,', 'настоящее,', 'прошлый,', 'будущий,', 'радовать,', 'огорчать,расстраивать,', 'радоваться,', 'огорчаться,расстраиваться,печалиться,горевать,скорбеть,страдать,', 'радость,', 'горе,печаль,страдание,скорбь,горесть,мука,горечь,', 'разговорчивый,', 'неразговорчивый,молчаливый,несловоохотливый,', 'различие,', 'сходство,', 'разно,', 'одинаково,', 'разносторонний,', 'односторонний,однобокий,', 'разноцветный,', 'одноцветный,однотонный,', 'разный,', 'одинаковый,', 'разрешать,', 'запрещать,воспрещать,', 'разрушать,', 'создавать,творить,строить,созидать,', 'разъединять,', 'объединять,соединять,', 'ранний,', 'поздний,', 'расположение,', 'нерасположение,антипатия,неприязнь,', 'расширять,', 'сокращать,сжимать,суживать,', 'редкий,', 'частый,нередкий,устойчивый,распространить,', 'робость,', 'смелость,', 'родина,', 'чужбина,', 'родной,', 'чужой,', 'рождаться,', 'умирать,', 'рождение,', 'смерть,', 'сближать,', 'отдалять,разобщать,', 'сверху,', 'снизу,внизу,', 'свет,', 'тьма,мрак,темнота,тень,', 'светлый,', 'тёмный,мрачный,', 'свободный,', 'скованный,занятый,', 'свой,', 'чужой,', 'север,', 'юг,', 'серьёзный,', 'несерьёзный,легкомысленный,', 'сзади,', 'спереди,впереди,', 'сила,', 'слабость,бессилие,', 'сильный,', 'слабый,немощный,лёгкий,', 'скупой,', 'щедрый,', 'слабый,', 'сильный,крепкий,', 'слева,', 'справа,', 'сложный,', 'простой,элементарный,', 'смелый,', 'трусливый,несмелый,робкий,', 'смеяться,', 'плакать,рыдать,', 'снимать,', 'надевать,', 'справедливый,', 'незаконный,несправедливый,', 'старый,', 'молодая,юный,новый,', 'сходный,', 'несходный,несхожий,отличный,', 'сходство,', 'различие,разница,', 'счастие,', 'несчастие,горе,', 'сырой,', 'сухой,', 'тайный,', 'явный,открытый,', 'тактичный,', 'бестактный,нетактичный,', 'тёмный,', 'светлый,ясный,', 'тесный,', 'свободный,широкий,', 'тихий,', 'громкий,оглушительный,шумный,буйный,', 'тишина,', 'шум,', 'толстеть,', 'худеть,сохнуть,таять,', 'толстый,', 'худой,тощий,костлявый,тонкий,', 'тонкий,', 'толстый,топорный,', 'трудный,', 'лёгкий,', 'трус,', 'храбрец,смельчак,', 'трусливый,', 'храбрый,смелый,мужественный,', 'тупой,', 'острый,умный,', 'тусклый,', 'яркий,', 'тяжёлый,', 'лёгкий,невесомый,нетрудный,', 'удача,', 'неудача,невезение,', 'удачный,', 'неудачный,несчастливый,злополучный,', 'узкий,', 'широкий,', 'умный,', 'глупый,неумный,дурак,', 'упругий,', 'дряблый,', 'хвала,', 'хула,порицание,', 'хвалить,', 'порицать,ругать,бранить,хулить,корить,', 'хороший,', 'плохой,дурной,худой,', 'худеть,', 'толстеть,полнеть,добреть,', 'худой,', 'толстый,полный,тучный,грузный,', 'частый,', 'нечастый,редкий,', 'чёткий,', 'нечёткий,неразборчивый,неясный,', 'чистый,', 'грязный,', 'чужой,', 'свой,близкий,', 'широкий,', 'узкий,тесный,', 'явный,', 'тайный,скрытый,затаённый,', 'яркий,', 'неяркий,тусклый,', 'ясный,', 'пасмурный,'],
        3:['бесед', 'говор', 'объясн', 'разгов', 'бесед', 'выраж', 'выраз', 'излаг', 'излож', 'изъясн', 'толк', 'коммент', 'объясн', 'опис', 'переда', 'поясн', 'разъясн', 'рассужд', 'рассуд', 'утвержд', 'утверд', 'вещал', 'вылож', 'молв', 'сказ', 'заяв', 'вест', 'изрек', 'объяв', 'глас ', 'осведомил', 'поведал', 'настав', 'произн', 'сообщ'],
        5.1:['адск', 'баснословн', 'безбреж', 'безгран', 'безжал', 'беззавет', 'безмер', 'безуд', 'безумн', 'безутеш', 'бескон', 'беспощ', 'беспред', 'беспровс', 'бесцен', 'бесчел', 'варвар', 'велик', 'велич', 'вопиющ', 'всемер', 'громад', 'дикая', 'дикую', 'дикой', 'дичай', 'дичаи', 'дьявольск', 'жесток', 'жутк', 'зверск', 'изувер', 'исключитель', 'истин', 'истова', 'истовы', 'истову', 'кардин', 'катастроф', 'колосс', 'крайн', 'краин', 'леденящ', 'максимал', 'мертвецк', 'могуч', 'мучител', 'небывал', 'невероятн', 'невидан', 'невозмож', 'невообр', 'невыносим', 'неимовер', 'неизмерим', 'неиссяк', 'неист', 'неистощ', 'неистреб', 'немыслим', 'ненасыт', 'необорим', 'необыкнов', 'необычайн', 'неодолим', 'неопров', 'неоспор', 'неперенос', 'неповтор', 'непогреш', 'непомер', 'непостиж', 'непреобор', 'непревзойд', 'неразрывно', 'несказан', 'неслыхан', 'несмолк', 'несокруш', 'несмыв', 'нестерп', 'несусвет', 'неудерж', 'неукл', 'неуст', 'неусып', 'неутеш', 'нечелов', 'нешут', 'нещад', 'оглушит', 'ожесточ', 'остерв', 'подлинн', 'поразит', 'потряс', 'предельн', 'прирожд', 'прожженн', 'разгром', 'райск', 'сатанин', 'свиреп', 'сказочно', 'смертель', 'сокрушит', 'сумасшед', 'титанич', 'триумфал', 'убийствен', 'ужасн', 'фанати', 'феномен', 'чертовск', 'чрезвыча', 'чрезмерн', 'чудовищн'],
        5.2:['абсолютн', 'безвозврат', 'безнадеж', 'безоговор', 'безраздел', 'безукор', 'безупреч', 'безуслов', 'бесповорот', 'беспрекослов', 'беспрогляд', 'беспросвет', 'бесслед', 'в корне', 'вконец', 'в совершенстве', 'всесторонн', 'всецел', 'гробов', 'диаметральн', 'до нитки', 'доскональ', 'исчерпыв', 'идеальн', 'категорически', 'миров', 'наглух', 'наотрез', 'напрочь', 'начисто', 'непоколебим', 'непререк', 'повальн', 'поголовн', 'совершен', 'сплошн', 'стопроцентн', 'тотальн'],
        5.3:['ой', 'ои', 'ый', 'ыи', 'ий', 'ии', 'ое', 'ее', 'ого', 'его', 'ому', 'ему', 'ым', 'им', 'ом', 'ем', 'ей', 'еи', 'ою', 'ею', 'ую', 'юю'],
        12:['и,', 'й,', 'те,', 'ь,'],
        }

        return dicts[num]

    @staticmethod
    def effect01(input_text):
        # Искусстевенный контраст
        # Для работы со словарем нужно из .csv сделать массив, где в строках перечисляются синонимы,
        # а слова из строки n+1 являются антонимами слов из строки n
        # dictionary[1][0] - первый синоним из второй строки(которая антонимы к первой)
        # Вход - токенизированный текст из инфинитивов слов
        # Возвращает список пар номеров предложений в котором встретился метод
        dictionary = ProcessingText.dwnld_dictionaries(1)
        report = []
        sentense = 0
        while sentense < len(input_text):
            flag = False
            for word in range(len(input_text[sentense])):
                for wntd_synonym in range(0, len(dictionary), 2):
                    for wntd in dictionary[wntd_synonym]:
                        # Почистить словарь от коротких словечек, чтобы не хватать все подряд и убрать первую проверку
                        if (len(wntd) > 2) and \
                                ((wntd in input_text[sentense][word]) or (input_text[sentense][word] == wntd)):
                            if (sentense != 0) and (sentense != (len(input_text)-1)):
                                # Проверка предыдущего, текущего и последующего предложения на антонимы
                                for sentense2 in range(sentense - 1, sentense + 2, 1):
                                    for word2 in range(len(input_text[sentense2])):
                                        for wntd2 in dictionary[wntd_synonym + 1]:
                                            if (len(wntd2) > 2) and \
                                                    (input_text[sentense2][word2] != input_text[sentense][word])\
                                                    and (wntd2 == input_text[sentense2][word2]):
                                                report.append([sentense, sentense2])
                                                flag = True
                                            if flag is True: break
                                        if flag is True: break
                                    if flag is True: break
                            elif sentense == 0:
                                # Проверка для первого предложения
                                for sentense2 in range(sentense, sentense + 2, 1):
                                    for word2 in range(len(input_text[sentense2])):
                                        for wntd2 in dictionary[wntd_synonym + 1]:
                                            if (len(wntd2) > 2) and \
                                                    (input_text[sentense2][word2] != input_text[sentense][word]) \
                                                    and (wntd2 == input_text[sentense2][word2]):
                                                report.append([sentense, sentense2])
                                                flag = True
                                            if flag is True: break
                                        if flag is True: break
                                    if flag is True: break
                            else:
                                # Проверка для последнего предложения
                                for sentense2 in range(sentense - 1, sentense + 1, 1):
                                    for word2 in range(len(input_text[sentense2])):
                                        for wntd2 in dictionary[wntd_synonym + 1]:
                                            if (len(wntd2) > 2) and \
                                                    (input_text[sentense2][word2] != input_text[sentense][word]) \
                                                    and (wntd2 == input_text[sentense2][word2]):
                                                report.append([sentense, sentense2])
                                                flag = True
                                            if flag is True: break
                                        if flag is True: break
                                    if flag is True: break
                        if flag is True: break
                    if flag is True: break
                if flag is True:
                    sentense += 2
                    break
            if flag is False: sentense += 1
        return report

    @staticmethod
    def effect01_test(input_text):
        # Искусстевенный контраст
        # Для работы со словарем нужно из .csv сделать массив, где в строках перечисляются синонимы,
        # а слова из строки n+1 являются антонимами слов из строки n
        # dictionary[1][0] - первый синоним из второй строки(которая антонимы к первой)
        # Возвращает список пар номеров предложений в котором встретился метод
        def result(rep, number_sentense):
            # Аккумуляция результатов
            suspect = ''
            if (number_sentense != 0) and (number_sentense != len(input_text) - 1):
                for sentense in range(number_sentense - 1, number_sentense + 2, 1):
                    for word in range(len(input_text[sentense])):
                        if word != (len(input_text[sentense]) - 1):
                            suspect += input_text[sentense][word] + ' '
                        else:
                            suspect += input_text[sentense][word] + '. '
            elif (number_sentense == 0):
                for sentense in range(number_sentense, number_sentense + 2, 1):
                    for word in range(len(input_text[sentense])):
                        if word != (len(input_text[sentense]) - 1):
                            suspect += input_text[sentense][word] + ' '
                        else:
                            suspect += input_text[sentense][word] + '. '
            else:
                for sentense in range(number_sentense - 1, number_sentense + 1, 1):
                    for word in range(len(input_text[sentense])):
                        if word != (len(input_text[sentense]) - 1):
                            suspect += input_text[sentense][word] + ' '
                        else:
                            suspect += input_text[sentense][word] + '. '
            rep += suspect + '\n\n'
            return rep

        def result_test(rep, num_sentense_1, num_word_1, num_sentense_2, num_word_2, word_1, word_2):
            # Аккумуляция результатов
            # Используется для анализа работоспособности метода - выделяются найденные слова в предложении
            suspect = ''
            if num_sentense_1 < num_sentense_2:
                for sentense in range(num_sentense_1, num_sentense_2 + 1, 1):
                    for word in range(len(input_text[sentense])):
                        if (sentense == num_sentense_1 and word == num_word_1) or \
                                (sentense == num_sentense_2 and word == num_word_2):
                            suspect += input_text[sentense][word].upper() + ' '
                        elif word != (len(input_text[sentense]) - 1):
                            suspect += input_text[sentense][word] + ' '
                        else:
                            suspect += input_text[sentense][word] + '. '
            else:
                for sentense in range(num_sentense_2, num_sentense_1 + 1, 1):
                    for word in range(len(input_text[sentense])):
                        if (sentense == num_sentense_1 and word == num_word_1) or \
                                (sentense == num_sentense_2 and word == num_word_2):
                            suspect += input_text[sentense][word].upper() + ' '
                        elif word != (len(input_text[sentense]) - 1):
                            suspect += input_text[sentense][word] + ' '
                        else:
                            suspect += input_text[sentense][word] + '. '
            rep += suspect + '\n' + word_1 + '/' + word_2 + '\n\n'
            return rep

        dictionary = ProcessingText.dwnld_dictionaries(1)
        # report = []
        report = ''
        sentense = 0
        while sentense < len(input_text):
            flag = False
            for word in range(len(input_text[sentense])):
                for wntd_synonym in range(0, len(dictionary), 2):
                    for wntd in dictionary[wntd_synonym]:
                        # Почистить словарь от коротких словечек, чтобы не хватать все подряд и убрать первую проверку
                        if (len(wntd) > 2) and \
                                ((wntd in input_text[sentense][word]) or (input_text[sentense][word] == wntd)):
                            if (sentense != 0) and (sentense != (len(input_text) - 1)):
                                # Проверка предыдущего, текущего и последующего предложения на антонимы
                                for sentense2 in range(sentense - 1, sentense + 2, 1):
                                    for word2 in range(len(input_text[sentense2])):
                                        for wntd2 in dictionary[wntd_synonym + 1]:
                                            if (len(wntd2) > 2) and \
                                                    (input_text[sentense2][word2] != input_text[sentense][word]) \
                                                    and (wntd2 == input_text[sentense2][word2]):
                                                # report.append([sentense, sentense2])
                                                # report = result(report, sentense)
                                                report = result_test(report, sentense, word, sentense2, word2, wntd,
                                                                     wntd2)
                                                flag = True
                                            if flag is True: break
                                        if flag is True: break
                                    if flag is True: break
                            elif sentense == 0:
                                # Проверка для первого предложения
                                for sentense2 in range(sentense, sentense + 2, 1):
                                    for word2 in range(len(input_text[sentense2])):
                                        for wntd2 in dictionary[wntd_synonym + 1]:
                                            if (len(wntd2) > 2) and \
                                                    (input_text[sentense2][word2] != input_text[sentense][word]) \
                                                    and (wntd2 == input_text[sentense2][word2]):
                                                # report.append([sentense, sentense2])
                                                # report = result(report, sentense)
                                                report = result_test(report, sentense, word, sentense2, word2, wntd,
                                                                     wntd2)
                                                flag = True
                                            if flag is True: break
                                        if flag is True: break
                                    if flag is True: break
                            else:
                                # Проверка для последнего предложения
                                for sentense2 in range(sentense - 1, sentense + 1, 1):
                                    for word2 in range(len(input_text[sentense2])):
                                        for wntd2 in dictionary[wntd_synonym + 1]:
                                            if (len(wntd2) > 2) and \
                                                    (input_text[sentense2][word2] != input_text[sentense][word]) \
                                                    and (wntd2 == input_text[sentense2][word2]):
                                                # report.append([sentense, sentense2])
                                                # report = result(report, sentense)
                                                report = result_test(report, sentense, word, sentense2, word2, wntd,
                                                                     wntd2)
                                                flag = True
                                            if flag is True: break
                                        if flag is True: break
                                    if flag is True: break
                        if flag is True: break
                    if flag is True: break
                if flag is True:
                    sentense += 2
                    break
            if flag is False: sentense += 1
        return report
        # self.ui.plainTextEdit_6.setPlainText(report)

    @staticmethod
    def effect02(input_text):
        # Манипулятивное комментирование
        # Вход - список из предложений текста
        # Возврящает список номеров предложений в которых встретился метод
        symbols = ["'", '"', '»', '«']
        readFile = open(r'dictionaries\base3.csv', 'r')
        dictionary = readFile.read()
        readFile.close()
        dictionary = dictionary.split('\n')
        report = []
        sentense = 0
        while sentense < len(input_text) - 3:
            bProper = False
            bWord = False
            bNoQuotes = False
            for letter in range(1, len(input_text[sentense]), 1):
                if (input_text[sentense][letter].isupper() is True) and (input_text[sentense][letter - 1] == ' '):
                    bProper = True
                    break
            if bProper is True:
                if (sentense != 0) or (sentense != (len(input_text) - 1)):
                    for sentense2 in range(sentense - 1, sentense + 2, 1):
                        for wntd in dictionary:
                            if wntd in input_text[sentense2] and wntd:
                                bWord = True
                                break
                        if bWord is True: break
                elif sentense == 0:
                    for sentense2 in range(sentense, sentense + 2, 1):
                        for wntd in dictionary:
                            if wntd in input_text[sentense2] and wntd:
                                bWord = True
                                break
                        if bWord is True: break
                else:
                    for sentense2 in range(sentense - 1, sentense + 1, 1):
                        for wntd in dictionary:
                            if wntd in input_text[sentense2]:
                                bWord = True
                                break
                        if bWord is True: break
            if (bProper is True) and (bWord is True):
                bNoQuotes = True
                if (sentense != 0) or (sentense != (len(input_text) - 1)):
                    for sentense2 in range(sentense - 1, sentense + 2, 1):
                        for symbol in symbols:
                            count = 2
                            for letter2 in input_text[sentense2]:
                                if letter2 == symbol:
                                    count -= 1
                            if count <= 0:
                                bNoQuotes = False
                                break
                elif sentense == 0:
                    for sentense2 in range(sentense, sentense + 2, 1):
                        for symbol in symbols:
                            count = 2
                            for letter2 in input_text[sentense2]:
                                if letter2 == symbol:
                                    count -= 1
                            if count <= 0:
                                bNoQuotes = False
                                break
                else:
                    for sentense2 in range(sentense - 1, sentense + 1, 1):
                        for symbol in symbols:
                            count = 2
                            for letter2 in input_text[sentense2]:
                                if letter2 == symbol:
                                    count -= 1
                            if count <= 0:
                                bNoQuotes = False
                                break
            if (bProper is True) and (bWord is True) and (bNoQuotes is True):
                if (sentense != 0) and (sentense != len(input_text) - 1):
                    for sentense2 in range(sentense - 1, sentense + 2, 1):
                        report.append(sentense2)
                sentense += 3
            else:
                sentense += 1
        return report

    @staticmethod
    def effect02_test(input_text):
        # Манипулятивное комментирование
        # Возврящает список номеров предложений в которых встретился метод
        symbols = ["'", '"', '»', '«']
        readFile = open(r'dictionaries\base3.csv', 'r')
        dictionary = readFile.read()
        readFile.close()
        dictionary = dictionary.split('\n')
        # report = []
        report = ''
        sentense = 0
        while sentense < len(input_text) - 3:
            bProper = False
            bWord = False
            bNoQuotes = False
            for letter in range(1, len(input_text[sentense]), 1):
                if (input_text[sentense][letter].isupper() is True) and (input_text[sentense][letter - 1] == ' '):
                    bProper = True
                    break
            if bProper is True:
                if (sentense != 0) or (sentense != (len(input_text) - 1)):
                    for sentense2 in range(sentense - 1, sentense + 2, 1):
                        for wntd in dictionary:
                            if wntd in input_text[sentense2] and wntd:
                                bWord = True
                                # ДЛЯ ТЕСТОВОГО ВЫВОДА
                                vyvod_wntd = wntd
                                break
                        if bWord is True: break
                elif sentense == 0:
                    for sentense2 in range(sentense, sentense + 2, 1):
                        for wntd in dictionary:
                            if wntd in input_text[sentense2] and wntd:
                                bWord = True
                                # ДЛЯ ТЕСТОВОГО ВЫВОДА
                                vyvod_wntd = wntd
                                break
                        if bWord is True: break
                else:
                    for sentense2 in range(sentense - 1, sentense + 1, 1):
                        for wntd in dictionary:
                            if wntd in input_text[sentense2]:
                                bWord = True
                                # ДЛЯ ТЕСТОВОГО ВЫВОДА
                                vyvod_wntd = wntd
                                break
                        if bWord is True: break
            if (bProper is True) and (bWord is True):
                bNoQuotes = True
                if (sentense != 0) or (sentense != (len(input_text) - 1)):
                    for sentense2 in range(sentense - 1, sentense + 2, 1):
                        for symbol in symbols:
                            count = 2
                            for letter2 in input_text[sentense2]:
                                if letter2 == symbol:
                                    count -= 1
                            if count <= 0:
                                bNoQuotes = False
                                break
                elif sentense == 0:
                    for sentense2 in range(sentense, sentense + 2, 1):
                        for symbol in symbols:
                            count = 2
                            for letter2 in input_text[sentense2]:
                                if letter2 == symbol:
                                    count -= 1
                            if count <= 0:
                                bNoQuotes = False
                                break
                else:
                    for sentense2 in range(sentense - 1, sentense + 1, 1):
                        for symbol in symbols:
                            count = 2
                            for letter2 in input_text[sentense2]:
                                if letter2 == symbol:
                                    count -= 1
                            if count <= 0:
                                bNoQuotes = False
                                break
            if (bProper is True) and (bWord is True) and (bNoQuotes is True):
                if (sentense != 0) and (sentense != len(input_text) - 1):
                    for sentense2 in range(sentense - 1, sentense + 2, 1):
                        report += str(input_text[sentense2]) + '.'
                        # report.append(sentense2)
                    report += '\n' + str(vyvod_wntd.upper()) + '\n\n'
                sentense += 3
            else:
                sentense += 1
        return report
        # self.ui.plainTextEdit_6.setPlainText(report)

    @staticmethod
    def effect03(input_text):
        # Ссылка на авторитет
        # effect03 - по сути повторяет все что происходит в effect02, кроме того, что во втором случае необходимо
        # наличие кавычек, а в первом необходимо их отсутствие
        # Вход - список из предложений текста
        # Возврящает список номеров предложений в которых встретился метод
        symbols = ["'", '"', '»', '«']
        readFile = open(r'dictionaries\base3.csv', 'r')
        dictionary = readFile.read()
        readFile.close()
        dictionary = dictionary.split('\n')
        report = []
        sentense = 0
        while sentense < len(input_text) - 3:
            bProper = False
            bWord = False
            bNoQuotes = False
            for letter in range(1, len(input_text[sentense]), 1):
                if (input_text[sentense][letter].isupper()) and (input_text[sentense][letter - 1] == ' '):
                    bProper = True
                    break
            if bProper is True:
                if (sentense != 0) or (sentense != (len(input_text) - 1)):
                    for sentense2 in range(sentense - 1, sentense + 2, 1):
                        for wntd in dictionary:
                            if wntd in input_text[sentense2] and wntd:
                                bWord = True
                                break
                        if bWord is True: break
                elif sentense == 0:
                    for sentense2 in range(sentense, sentense + 2, 1):
                        for wntd in dictionary:
                            if wntd in input_text[sentense2]:
                                bWord = True
                                break
                        if bWord is True: break
                else:
                    for sentense2 in range(sentense - 1, sentense + 1, 1):
                        for wntd in dictionary:
                            if wntd in input_text[sentense2]:
                                bWord = True
                                break
                        if bWord is True: break
            if (bProper is True) and (bWord is True):
                bNoQuotes = True
                if (sentense != 0) or (sentense != (len(input_text) - 1)):
                    for sentense2 in range(sentense - 1, sentense + 2, 1):
                        for symbol in symbols:
                            count = 0
                            for letter2 in input_text[sentense2]:
                                if letter2 == symbol:
                                    count += 1
                            if count >= 2:
                                bNoQuotes = False
                                break
                elif sentense == 0:
                    for sentense2 in range(sentense, sentense + 2, 1):
                        for symbol in symbols:
                            count = 0
                            for letter2 in input_text[sentense2]:
                                if letter2 == symbol:
                                    count += 1
                            if count >= 2:
                                bNoQuotes = False
                                break
                else:
                    for sentense2 in range(sentense - 1, sentense + 1, 1):
                        for symbol in symbols:
                            count = 0
                            for letter2 in input_text[sentense2]:
                                if letter2 == symbol:
                                    count += 1
                            if count >= 2:
                                bNoQuotes = False
                                break
            if (bProper is True) and (bWord is True) and (bNoQuotes is False):
                if (sentense != 0) and (sentense != len(input_text) - 1):
                    for sentense2 in range(sentense - 1, sentense + 2, 1):
                        report.append(sentense2)
                sentense += 3
            else:
                sentense += 1
        return report

    @staticmethod
    def effect03_test(input_text):
        # Ссылка на авторитет
        # effect03 - по сути повторяет все что происходит в effect02, кроме того, что во втором случае необходимо
        # наличие кавычек, а в первом необходимо их отсутствие
        # Возврящает список номеров предложений в которых встретился метод

        symbols = ["'", '"', '»', '«']
        readFile = open(r'dictionaries\base3.csv', 'r')
        dictionary = readFile.read()
        readFile.close()
        dictionary = dictionary.split('\n')
        # report = []
        report = ''
        sentense = 0
        while sentense < len(input_text) - 3:
            bProper = False
            bWord = False
            bNoQuotes = False
            for letter in range(1, len(input_text[sentense]), 1):
                if (input_text[sentense][letter].isupper()) and (input_text[sentense][letter - 1] == ' '):
                    bProper = True
                    break
            if bProper is True:
                if (sentense != 0) or (sentense != (len(input_text) - 1)):
                    for sentense2 in range(sentense - 1, sentense + 2, 1):
                        for wntd in dictionary:
                            if wntd in input_text[sentense2] and wntd:
                                bWord = True
                                # ДЛЯ ТЕСТОВОГО ВЫВОДА
                                vyvod_wntd = wntd
                                break
                        if bWord is True: break
                elif sentense == 0:
                    for sentense2 in range(sentense, sentense + 2, 1):
                        for wntd in dictionary:
                            if wntd in input_text[sentense2]:
                                bWord = True
                                # ДЛЯ ТЕСТОВОГО ВЫВОДА
                                vyvod_wntd = wntd
                                break
                        if bWord is True: break
                else:
                    for sentense2 in range(sentense - 1, sentense + 1, 1):
                        for wntd in dictionary:
                            if wntd in input_text[sentense2]:
                                bWord = True
                                # ДЛЯ ТЕСТОВОГО ВЫВОДА
                                vyvod_wntd = wntd
                                break
                        if bWord is True: break
            if (bProper is True) and (bWord is True):
                bNoQuotes = True
                if (sentense != 0) or (sentense != (len(input_text) - 1)):
                    for sentense2 in range(sentense - 1, sentense + 2, 1):
                        for symbol in symbols:
                            count = 0
                            for letter2 in input_text[sentense2]:
                                if letter2 == symbol:
                                    count += 1
                            if count >= 2:
                                bNoQuotes = False
                                break
                elif sentense == 0:
                    for sentense2 in range(sentense, sentense + 2, 1):
                        for symbol in symbols:
                            count = 0
                            for letter2 in input_text[sentense2]:
                                if letter2 == symbol:
                                    count += 1
                            if count >= 2:
                                bNoQuotes = False
                                break
                else:
                    for sentense2 in range(sentense - 1, sentense + 1, 1):
                        for symbol in symbols:
                            count = 0
                            for letter2 in input_text[sentense2]:
                                if letter2 == symbol:
                                    count += 1
                            if count >= 2:
                                bNoQuotes = False
                                break
            if (bProper is True) and (bWord is True) and (bNoQuotes is False):
                if (sentense != 0) and (sentense != len(input_text) - 1):
                    for sentense2 in range(sentense - 1, sentense + 2, 1):
                        report += input_text[sentense2] + '.'
                        # report.append(sentense2)
                    report += '\n' + vyvod_wntd
                sentense += 3
            else:
                sentense += 1
        return report
        # self.ui.plainTextEdit_6.setPlainText(report)

    @staticmethod
    def effect04(input_text):
        # Гиперболизация
        # Возврящает список номеров предложений в которых встретился метод
        aHigh = PsychoReader.dwnld_dictionaries(num=5.1)
        aHighest = PsychoReader.dwnld_dictionaries(num=5.2)
        aEnd = PsychoReader.dwnld_dictionaries(num=5.3)
        sentense = 0
        report = []
        while sentense < len(input_text):
            bHigh = False
            bHighest = False
            bEnd = False
            for word in range(0, len(input_text[sentense]), 1):
                if input_text[sentense][word]:
                    for high in aHigh:
                        if high in input_text[sentense][word] and high:
                            bHigh = True
                            break
                    if bHigh is True:
                        report.append(sentense)
                        sentense += 2
                        break
                    else:
                        for highest in aHighest:
                            if highest in input_text[sentense][word] and highest:
                                bHighest = True
                                break
                    if bHighest is True:
                        report.append(sentense)
                        sentense += 2
                        break
                    else:
                        if ((input_text[sentense][word] == 'самый') or (input_text[sentense][word] == 'наиболее') or
                                (input_text[sentense][word] == 'наименее') or (input_text[sentense][word] == 'самая') or
                                (input_text[sentense][word] == 'самое')):
                                for word_1 in range(0, len(input_text[sentense]), 1):
                                    for end in aEnd:
                                        if (input_text[sentense][word_1].endswith(end)) and end:
                                            bEnd = True
                                            break
                                    if bEnd is True:
                                        break
                    if bEnd is True:
                        report.append(sentense)
                        sentense += 2
                        break
            sentense += 1
        return report

    @staticmethod
    def effect04_test(input_text):
        # Гиперболизация
        # Возврящает список номеров предложений в которых встретился метод
        aHigh = PsychoReader.dwnld_dictionaries(num=5.1)
        aHighest = PsychoReader.dwnld_dictionaries(num=5.2)
        aEnd = PsychoReader.dwnld_dictionaries(num=5.3)
        sentense = 0
        # report = []
        report = ''
        while sentense < len(input_text):
            bHigh = False
            bHighest = False
            bEnd = False
            for word in range(0, len(input_text[sentense]), 1):
                if input_text[sentense][word]:
                    for high in aHigh:
                        if high in input_text[sentense][word] and high:
                            bHigh = True
                            vyvod_wntd = high
                            break
                    if bHigh is True:
                        # report.append(sentense)
                        # ________________________________________
                        for word in range(0, len(input_text[sentense]), 1):
                            if vyvod_wntd in input_text[sentense][word]:
                                report += input_text[sentense][word].upper() + ' '
                            else:
                                report += input_text[sentense][word] + ' '
                        report += '\n' + vyvod_wntd.upper() + '\n\n'
                        # ________________________________________
                        sentense += 2
                        break
                    else:
                        for highest in aHighest:
                            if highest in input_text[sentense][word] and highest:
                                bHighest = True
                                vyvod_wntd = highest
                                break
                    if bHighest is True:
                        # report.append(sentense)
                        # ________________________________________
                        for word in range(0, len(input_text[sentense]), 1):
                            if vyvod_wntd in input_text[sentense][word]:
                                report += input_text[sentense][word].upper() + ' '
                            else:
                                report += input_text[sentense][word] + ' '
                        report += '\n' + vyvod_wntd.upper() + '\n\n'
                        # ________________________________________
                        sentense += 2
                        break
                    else:
                        if ((input_text[sentense][word] == 'самый') or (input_text[sentense][word] == 'наиболее') or
                                (input_text[sentense][word] == 'наименее') or (input_text[sentense][word] == 'самая') or
                                (input_text[sentense][word] == 'самое')):
                            for word_1 in range(0, len(input_text[sentense]), 1):
                                for end in aEnd:
                                    if (input_text[sentense][word_1].endswith(end)) and end:
                                        bEnd = True
                                        vyvod_wntd = input_text[sentense][word]
                                        vyvod_wntd2 = input_text[sentense][word_1]
                                        break
                                if bEnd is True:
                                    break
                    if bEnd is True:
                        # report.append(sentense)
                        # ________________________________________
                        for word in range(0, len(input_text[sentense]), 1):
                            if vyvod_wntd is input_text[sentense][word]:
                                report += input_text[sentense][word].upper() + ' '
                            elif vyvod_wntd2 is input_text[sentense][word]:
                                report += input_text[sentense][word].upper() + ' '
                            else:
                                report += input_text[sentense][word]
                        report += '\n' + vyvod_wntd.upper() + ' ' + vyvod_wntd2.upper() + '\n\n'
                        # ________________________________________
                        sentense += 2
                        break
            sentense += 1
        return report
        # self.ui.plainTextEdit_6.setPlainText(report)

    @staticmethod
    def effect05(input_text):
        # Поиск призывов
        # На вход подается список из токенезированного текста
        # На выходе список из пар типа [номер_предложения, номер_слова] - попадающие под призыв
        report = []
        words_endings = ProcessingText.dwnld_dictionaries(num=12)
        for sentense in range(len(input_text)):
            for word in range(len(input_text[sentense])):
                pos = ProcessingText.get_pos(input_text[sentense][word])
                if str(pos) == 'VERB' or str(pos) == 'INFN':
                    for row in range(len(words_endings)):
                        for column in range(len(words_endings[row])):
                            if input_text[sentense][word].endswith(words_endings[row][column]):
                                report.append([sentense, word])
        return report

    @staticmethod
    def effect06(input_text):
        #Поиск лозунгов
        # На вход подается список из токенезированного текста
        # На выходе список из пар типа [номер_предложения, номер_слова] - попадающие под призыв
        report = []

    @staticmethod
    def direction(input_text):
        # Определение направленности текста
        # На вход подается текст
        # На выходе список с результатами
        old_analyse_text = input_text
        input_text = ProcessingText.clrText(input_text, 2)
        input_text = ProcessingText.spltText(input_text, 0)
        input_text = ProcessingText.getInfinitive(input_text)
        a_suicide = ProcessingText.dwnld_dictionaries(num=11.7)
        i_suicide = 0
        for sentense in range(len(input_text)):
            for row in range(len(a_suicide)):
                count = 0
                for column in range(len(a_suicide[row])):
                    found = False
                    for word in range(len(input_text[sentense])):
                        if input_text[sentense][word] == a_suicide[row][column]:
                            count += 1
                            found = True
                            break
                    if found is True:
                        continue
                if count == len(a_suicide[row]):
                    i_suicide += 1

        # Подсчет количества слов в тексте
        count_words = 0
        for sentense in range(len(input_text)):
            for word in range(len(input_text[sentense])):
                count_words += 1

        # Старый вариант определения направленности. Предполагается со временем отойти от него.
        aStuff = ProcessingText.dwnld_dictionaries(num=11.1)
        iStuff = 0
        aIslam = ProcessingText.dwnld_dictionaries(num=11.2)
        iIslam = 0
        aNark = ProcessingText.dwnld_dictionaries(num=11.3)
        iNark = 0
        aPolitic = ProcessingText.dwnld_dictionaries(num=11.4)
        iPolitic = 0
        aChrist = ProcessingText.dwnld_dictionaries(num=11.5)
        iChrist = 0
        aExtermism = ProcessingText.dwnld_dictionaries(num=11.6)
        iExtremism = 0
        sentense = 0
        input_text = ProcessingText.clrText(old_analyse_text, 0)
        input_text = ProcessingText.spltText(input_text, 1)
        while sentense < len(input_text):
            for row in aStuff:
                for column in row:
                    if len(column) > 3 and column in input_text[sentense]:
                        iStuff += 1
            for row in aIslam:
                for column in row:
                    if len(column) > 3 and column in input_text[sentense]:
                        iIslam += 1
            for row in aNark:
                for column in row:
                    if len(column) > 3 and column in input_text[sentense]:
                        iNark += 1
            for row in aPolitic:
                for column in row:
                    if len(column) > 3 and column in input_text[sentense]:
                        iPolitic += 1
            for row in aChrist:
                for column in row:
                    if len(column) > 3 and column in input_text[sentense]:
                        iChrist += 1
            for row in aExtermism:
                for column in row:
                    if len(column) > 3 and column in input_text[sentense]:
                        iExtremism += 1
            sentense += 1
        report = []
        report.append(count_words)
        report.append(iStuff)
        report.append(iIslam)
        report.append(iNark)
        report.append(iPolitic)
        report.append(iChrist)
        report.append(iExtremism)
        report.append(i_suicide)
        return report

    @staticmethod
    def direction_test(input_text):
        # Определение направленности текста
        # На вход подается текст
        # На выходе текст
        old_analyse_text = input_text
        input_text = ProcessingText.clrText(input_text, 2)
        input_text = ProcessingText.spltText(input_text, 0)
        input_text = ProcessingText.getInfinitive(input_text)
        a_suicide = ProcessingText.dwnld_dictionaries(num=11.7)
        i_suicide = 0
        for sentense in range(len(input_text)):
            for row in range(len(a_suicide)):
                count = 0
                for word in range(len(input_text[sentense])):
                    for column in range(len(a_suicide[row])):
                        if input_text[sentense][word] == a_suicide[row][column]:
                            count += 1
                if count == len(a_suicide[row]):
                    i_suicide += 1

        # Подсчет количества слов в тексте
        count_words = 0
        for sentense in range(len(input_text)):
            for word in range(len(input_text[sentense])):
                count_words += 1

        # Старый вариант определения направленности. Предполагается со временем отойти от него.
        aStuff = ProcessingText.dwnld_dictionaries(num=11.1)
        iStuff = 0
        aIslam = ProcessingText.dwnld_dictionaries(num=11.2)
        iIslam = 0
        aNark = ProcessingText.dwnld_dictionaries(num=11.3)
        iNark = 0
        aPolitic = ProcessingText.dwnld_dictionaries(num=11.4)
        iPolitic = 0
        aChrist = ProcessingText.dwnld_dictionaries(num=11.5)
        iChrist = 0
        aExtermism = ProcessingText.dwnld_dictionaries(num=11.6)
        iExtremism = 0
        sentense = 0
        input_text = ProcessingText.clrText(old_analyse_text, 0)
        input_text = ProcessingText.spltText(input_text, 1)
        while sentense < len(input_text):
            for row in aStuff:
                for column in row:
                    if len(column) > 3 and column in input_text[sentense]:
                        iStuff += 1
            for row in aIslam:
                for column in row:
                    if len(column) > 3 and column in input_text[sentense]:
                        iIslam += 1
            for row in aNark:
                for column in row:
                    if len(column) > 3 and column in input_text[sentense]:
                        iNark += 1
            for row in aPolitic:
                for column in row:
                    if len(column) > 3 and column in input_text[sentense]:
                        iPolitic += 1
            for row in aChrist:
                for column in row:
                    if len(column) > 3 and column in input_text[sentense]:
                        iChrist += 1
            for row in aExtermism:
                for column in row:
                    if len(column) > 3 and column in input_text[sentense]:
                        iExtremism += 1
            sentense += 1
        report = 'Stuff:' + str((iStuff * 100) / count_words) + \
                 '\nIslam:' + str((iIslam * 110) / count_words) + \
                 '\nNark:' + str((iNark * 103) / count_words) + \
                 '\nPolitic:' + str((iPolitic * 195) / count_words) + \
                 '\nChrist:' + str(((iChrist * 143) / count_words)) + \
                 '\nExtremism:' + str((iExtremism * 108) / count_words) + \
                 '\nSuicide:' + str((i_suicide * 415) / count_words)
        return report